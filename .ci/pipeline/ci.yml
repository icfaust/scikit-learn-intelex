#===============================================================================
# Copyright 2020 Intel Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#===============================================================================

trigger:
  branches:
    include:
    - main
    - rls/*
  paths:
    exclude:
    - requirements-doc.txt
    - doc/
    - .ci/pipeline/docs.yml
    - .github/Pull_Request_template.md

pr:
  branches:
    include:
    - main
    - rls/*
  paths:
    exclude:
    - requirements-doc.txt
    - doc/
    - .ci/pipeline/docs.yml
    - .github/Pull_Request_template.md

variables:
  PYTHON: 'python'
  ARGS: '1'
  SHELLOPTS: 'errexit:pipefail'
  ISORT_VERSION: 5.13.1
  BLACK_VERSION: 24.1.1
  PYTHON_LINT_VERSION: '3.10'

jobs:
- job: Lint
  pool:
    vmImage: 'ubuntu-22.04'
  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: ${PYTHON_LINT_VERSION}
      addToPath: true
  - script: |
      if !(grep -q "rev: ${ISORT_VERSION}" ./.pre-commit-config.yaml) then echo "##vso[task.logissue type=error]isort version mismatch"; fi
      if !(grep -q "rev: ${BLACK_VERSION}" ./.pre-commit-config.yaml); then echo "##vso[task.logissue type=error]black version mismatch"; fi
      if !(grep -q "python${PYTHON_LINT_VERSION}" ./.pre-commit-config.yaml); then echo "##vso[task.logissue type=error]python lint version mismatch"; fi
      python -m pip install --upgrade pip setuptools
      pip install isort==${ISORT_VERSION} black[jupyter]==${BLACK_VERSION}
      isort --profile black --check . && black --check .
    displayName: 'Linting'
- job: LinuxCondaEnv
  dependsOn: Lint
  timeoutInMinutes: 120
  strategy:
    matrix:
      Python3.9_Sklearn1.0:
        PYTHON_VERSION: '3.9'
        SKLEARN_VERSION: '1.0'
      Python3.9_Sklearn1.1:
        PYTHON_VERSION: '3.9'
        SKLEARN_VERSION: '1.1'
      Python3.10_Sklearn1.2:
        PYTHON_VERSION: '3.10'
        SKLEARN_VERSION: '1.2'
      Python3.11_Sklearn1.3:
        PYTHON_VERSION: '3.11'
        SKLEARN_VERSION: '1.3'
      Python3.12_Sklearn1.4:
        PYTHON_VERSION: '3.12'
        SKLEARN_VERSION: '1.4'
      Python3.12_Sklearn1.5:
        PYTHON_VERSION: '3.12'
        SKLEARN_VERSION: '1.5'
  pool:
    vmImage: 'ubuntu-22.04'
  steps:
  - template: build-and-test-lnx.yml
- job: WindowsCondaEnv
  dependsOn: Lint
  timeoutInMinutes: 120
  strategy:
    matrix:
      Python3.9_Sklearn1.0:
        PYTHON_VERSION: '3.9'
        SKLEARN_VERSION: '1.0'
      Python3.9_Sklearn1.1:
        PYTHON_VERSION: '3.9'
        SKLEARN_VERSION: '1.1'
      Python3.10_Sklearn1.2:
        PYTHON_VERSION: '3.10'
        SKLEARN_VERSION: '1.2'
      Python3.11_Sklearn1.3:
        PYTHON_VERSION: '3.11'
        SKLEARN_VERSION: '1.3'
      Python3.12_Sklearn1.4:
        PYTHON_VERSION: '3.12'
        SKLEARN_VERSION: '1.4'
      Python3.12_Sklearn1.5:
        PYTHON_VERSION: '3.12'
        SKLEARN_VERSION: '1.5'
  pool:
    vmImage: 'windows-latest'
  steps:
  - template: build-and-test-win.yml

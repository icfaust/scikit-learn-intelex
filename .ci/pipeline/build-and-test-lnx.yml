#===============================================================================
# Copyright 2023 Intel Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#===============================================================================
steps:
  - script: sudo apt-get update && sudo apt-get install -y clang-format
    displayName: "apt-get"
  - script: |
      bash .ci/scripts/install_dpcpp.sh
    displayName: "dpcpp installation"
  - script: |
      source /opt/intel/oneapi/compiler/latest/env/vars.sh
      bash .ci/scripts/describe_system.sh
    displayName: "System info"
  - script: |
      conda config --add channels conda-forge
      conda config --set channel_priority strict
      conda update -y -q conda
      conda create -q -y -n CB -c conda-forge python=$(PYTHON_VERSION) mpich pyyaml "dpcpp-cpp-rt=2024.2.0"
    displayName: "Conda create"
  - script: |
      . /usr/share/miniconda/etc/profile.d/conda.sh
      conda activate CB
      if [ -z "$(DALROOT)" ]; then conda install -q -y -c conda-forge dal-devel; fi
      pip install -r dependencies-dev
      pip list
    displayName: "Install develop requirements"
  - script: |
      export DPCPPROOT=/opt/intel/oneapi/compiler/latest
      . /usr/share/miniconda/etc/profile.d/conda.sh
      conda activate CB
      if [ -z "$(DALROOT)" ]; then export DALROOT=$CONDA_PREFIX; else export DALROOT=$(DALROOT); fi
      if [ -n "$(NO_DPC)" ]; then export NO_DPC=1; fi # enable non-dpc builds in CI when var set
      if [ -n "$(NO_DIST)" ]; then export NO_DIST=1; fi # enable non-mpi builds in CI when var set
      ./conda-recipe/build.sh
    displayName: "Build daal4py/sklearnex"
  - script: |
      . /usr/share/miniconda/etc/profile.d/conda.sh
      conda activate CB
      bash .ci/scripts/setup_sklearn.sh $(SKLEARN_VERSION)
      pip install --upgrade -r requirements-test.txt
      pip install $(python .ci/scripts/get_compatible_scipy_version.py)
      if [ $(echo $(PYTHON_VERSION) | grep '3.9\|3.11') ] && [ $(SKLEARN_VERSION) != "1.0" ] && [ -z $(NO_DPC) ]; then conda install -q -y -c https://software.repos.intel.com/python/conda/ dpctl=0.17.0 dpnp=0.15.0; fi
      pip list
    displayName: "Install testing requirements"
  - script: |
      . /usr/share/miniconda/etc/profile.d/conda.sh
      if [ -n "$(DALROOT)" ]; then export DALROOT=$(DALROOT); fi
      if [ -n "$(TBBROOT)" ]; then export TBBROOT=$(TBBROOT); fi
      conda activate CB
      cd ..
      ./s/conda-recipe/run_test.sh --json-report
    displayName: "Sklearnex testing"
  - script: |
      . /usr/share/miniconda/etc/profile.d/conda.sh
      conda activate CB
      if [ -n "$(DALROOT)" ] && [ "$(DALROOT)" != "${CONDA_PREFIX}" ]; then source $(DALROOT)/env/vars.sh; fi
      if [ -n "$(TBBROOT)" ] && [ "$(TBBROOT)" != "${CONDA_PREFIX}" ]; then source $(TBBROOT)/env/vars.sh; fi
      bash .ci/scripts/run_sklearn_tests.sh cpu
    displayName: "Sklearn testing"
    condition: succeededOrFailed()
  - script: |
      . /usr/share/miniconda/etc/profile.d/conda.sh
      conda activate CB
      if [ -n "$(DALROOT)" ] && [ "$(DALROOT)" != "${CONDA_PREFIX}" ]; then source $(DALROOT)/env/vars.sh; fi
      if [ -n "$(TBBROOT)" ] && [ "$(TBBROOT)" != "${CONDA_PREFIX}" ]; then source $(TBBROOT)/env/vars.sh; fi
      bash .ci/scripts/run_sklearn_tests.sh cpu
    env:
      SKLEARNEX_PREVIEW: "YES"
    displayName: "Sklearn testing [preview]"
    condition: succeededOrFailed()
